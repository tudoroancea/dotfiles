{
    // ======== UI ========================
    "workbench.activityBar.location": "top",
    "workbench.colorTheme": "Ros√© Pine Dawn",
    "workbench.iconTheme": "material-icon-theme",
    "material-icon-theme.folders.theme": "specific",
    // top bar
    "window.density.editorTabHeight": "compact",
    "workbench.editor.showTabs": "multiple",
    // "breadcrumbs.enabled": true, // breadcrumb path at top of window
    // "window.commandCenter": true, // command center at the top of the window. Use cmd+shift+p instead
    // "workbench.layoutControl.enabled": true, // those little squares on the top right of the window
    // minimap
    "editor.minimap.renderCharacters": false, // make minimap blockish (low level of detail)
    "editor.hideCursorInOverviewRuler": true, // don't highlight current line in scrollbar
    "editor.minimap.autohide": true, // shows minimap only on hoverworkbench.editor.editorActionsLocation": "hidden", // hides the "format" and ellipsis buttons on the top right of the window
    // fonts
    // "editor.fontFamily": "Monaspace Neon",
    // "editor.lineHeight": 1.5,
    // "editor.inlineSuggest.fontFamily": "Monaspace Radon",
    "editor.fontLigatures": true,
    // "terminal.integrated.fontLigatures": true,
    // "terminal.integrated.fontFamily": "Monaspace Neon",
    // "terminal.integrated.lineHeight": 1.5,
    // "editor.fontSize": 12,
    // cursor
    // "editor.cursorBlinking": "expand",
    // "editor.cursorSmoothCaretAnimation": "off",
    // editor
    "editor.stickyScroll.enabled": true, // keep block name fixed at top when scrolling
    "editor.wordWrap": "off", // wrap text instead of scrolling horizontally
    "editor.inlineSuggest.enabled": true,
    "editor.lineNumbers": "relative",
    "editor.minimap.enabled": false,
    "editor.wordBasedSuggestions": "matchingDocuments", // to inspect
    // ========== vim ========================
    "vim.foldfix": true,
    "vim.useSystemClipboard": true,
    "vim.leader": "<space>",
    "vim.incsearch": true,
    "extensions.experimental.affinity": {
        "vscodevim.vim": 1
    },
    "vim.insertModeKeyBindingsNonRecursive": [
        // {
        //     "before": [
        //         "<C-l>"
        //     ],
        //     "commands": [
        //         "editor.action.inlineSuggest.commit"
        //     ],
        //     "silent": true,
        // },
        // {
        //     "before": [
        //         "<C-;>"
        //     ],
        //     "commands": [
        //         "editor.action.inlineSuggest.acceptNextWord",
        //     ],
        //     "silent": true
        // }
    ],
    "vim.normalModeKeyBindingsNonRecursive": [
        {
            "before": [
                ":"
            ],
            "commands": [
                "workbench.action.showCommands",
            ],
            "silent": true
        },
        {
            "before": [
                "<leader>",
                "w",
            ],
            "commands": [
                "workbench.action.files.save"
            ],
        },
        {
            "before": [
                "<leader>",
                "W",
            ],
            "commands": [
                "workbench.action.files.saveWithoutFormatting"
            ],
        },
        {
            "before": [
                "<leader>",
                "c"
            ],
            "commands": [
                "workbench.action.closeActiveEditor"
            ],
        },
        {
            "before": [
                "<leader>",
                "t"
            ],
            "commands": [
                "workbench.view.testing.focus"
            ],
        },
        {
            "before": [
                "<leader>",
                "l",
                "f"
            ],
            "commands": [
                "editor.action.formatDocument"
            ],
        },
        {
            "before": [
                "<leader>",
                "/"
            ],
            "commands": [
                "editor.action.commentLine"
            ],
        },
        {
            "before": [
                "<leader>",
                "e",
            ],
            "commands": [
                "workbench.view.explorer"
            ],
        },
        {
            "before": [
                "g",
                "h"
            ],
            "after": [
                "editor.action.showHover"
            ],
        },
        {
            "before": [
                "K"
            ],
            "after": [
                "editor.action.showHover"
            ],
        },
        {
            "before": [
                "g",
                "a"
            ],
            "after": [
                "0",
                "t",
                "("
            ],
        },
        {
            "before": [
                "g",
                "r"
            ],
            "commands": [
                "editor.action.goToReferences"
            ],
        },
    ],
    "vim.visualModeKeyBindingsNonRecursive": [
        {
            "before": [
                "<leader>",
                "/"
            ],
            "commands": [
                "editor.action.commentLine"
            ],
        },
    ],
    // ======== git ========================
    "git.autofetch": true,
    "git.confirmSync": true,
    "git.enableSmartCommit": true,
    "git.enableStatusBarSync": false,
    "git.openRepositoryInParentFolders": "always",
    "git.showActionButton": {
        "commit": true,
        "publish": true,
        "sync": false
    },
    "git.blame.editorDecoration.enabled": false,
    // "git.smartCommitChanges": "tracked",
    // "git.suggestSmartCommit": true,
    // "gitlens.mode.active": "zen", // toggle with command palette, zen mode hides gitlens stuff for when you don't need it
    // "gitlens.graph.avatars": false,
    // "gitlens.graph.layout": "editor",
    // "gitlens.graph.minimap.enabled": false,
    // "gitlens.graph.statusBar.enabled": true,
    // "gitlens.telemetry.enabled": false,
    // ======== Languages ========================
    // python
    "[python]": {
        "editor.defaultFormatter": "charliermarsh.ruff",
        "editor.formatOnSave": true,
        "editor.formatOnSaveMode": "modifications",
        "editor.codeActionsOnSave": {
            "source.organizeImports": "explicit",
        }
    },
    "basedpyright.analysis.autoImportCompletions": true,
    "basedpyright.analysis.diagnosticMode": "openFilesOnly",
    "basedpyright.analysis.typeCheckingMode": "off",
    "ruff.path": [
        "/Users/tudoroancea/.local/bin/ruff"
    ],
    "ruff.enable": true,
    "ruff.organizeImports": true,
    // C++
    "[cpp]": {
        "editor.defaultFormatter": "llvm-vs-code-extensions.vscode-clangd",
        "editor.formatOnSave": true,
        "editor.formatOnSaveMode": "modificationsIfAvailable"
    },
    "C_Cpp.autocomplete": "disabled",
    "C_Cpp.codeFolding": "disabled",
    "C_Cpp.errorSquiggles": "disabled",
    "C_Cpp.formatting": "disabled",
    "C_Cpp.intelliSenseEngine": "disabled",
    "clangd.arguments": [
        "--compile-commands-dir=build"
    ],
    "cmake.configureOnOpen": false,
    "cmake.options.advanced": {
        "configure": {
            "projectStatusVisibility": "hidden"
        },
        "folder": {
            "statusBarVisibility": "hidden"
        },
        "variant": {
            "statusBarVisibility": "compact"
        },
        "kit": {
            "statusBarVisibility": "hidden"
        },
        "ctest": {
            "statusBarVisibility": "hidden"
        },
        "cpack": {
            "statusBarVisibility": "hidden"
        },
        "workflow": {
            "statusBarVisibility": "hidden"
        },
        "build": {
            "statusBarVisibility": "icon"
        },
        "buildTarget": {
            "statusBarVisibility": "compact"
        },
        "launch": {
            "statusBarVisibility": "icon"
        },
        "debug": {
            "statusBarVisibility": "icon"
        },
        "launchTarget": {
            "statusBarVisibility": "compact"
        },
    },
    "cmake.options.statusBarVisibility": "compact",
    "cmake.pinnedCommands": [
        "workbench.action.tasks.configureTaskRunner",
        "workbench.action.tasks.runTask"
    ],
    "testMate.cpp.test.workingDirectory": "build/brains2",
    "sonarlint.pathToCompileCommands": "build/compile_commands.json",
    // typst
    "tinymist.semanticTokens": "enable",
    "tinymist.exportPdf": "onSave",
    "tinymist.trace.server": "messages",
    "tinymist.formatterMode": "typstfmt",
    "[typst-code]": {
        "editor.formatOnSave": true,
    },
    // ======= meta =========
    "workbench.settings.editor": "json",
    "workbench.startupEditor": "none",
    "telemetry.telemetryLevel": "off",
    "dotnetAcquisitionExtension.enableTelemetry": false,
    "update.mode": "default",
    "debug.onTaskErrors": "abort",
    "debug.toolBarLocation": "docked",
    "editor.accessibilitySupport": "off",
    "editor.formatOnSaveMode": "modifications",
    "files.autoSave": "onFocusChange",
    "redhat.telemetry.enabled": false,
    "security.promptForLocalFileProtocolHandling": false,
    "terminal.external.osxExec": "Alacritty.app",
    "terminal.integrated.inheritEnv": false,
    "diffEditor.hideUnchangedRegions.enabled": true,
    "diffEditor.ignoreTrimWhitespace": false,
    "diffEditor.experimental.useTrueInlineView": true,
    "terminal.integrated.commandsToSkipShell": [
        "matlab.interrupt"
    ],
    "jupyter.widgetScriptSources": [
        "jsdelivr.com",
        "unpkg.com"
    ],
    "workbench.editor.enablePreview": false,
    // =============== AI ============
    "github.copilot.nextEditSuggestions.enabled": true,
    "github.copilot.enable": {
        "*": true,
        "plaintext": false,
        "markdown": true,
        "scminput": false
    },
    "extensions.ignoreRecommendations": true,
}